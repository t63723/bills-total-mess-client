
// Файл: app.d.ts
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};

// Файл: app.html
<!doctype html>
<html lang="en">

<head>
	<meta charset="utf-8" />
	<link rel="icon" href="%sveltekit.assets%/favicon.png" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
	%sveltekit.head%
</head>

<body data-sveltekit-preload-data="hover">
	<div style="display: contents">%sveltekit.body%</div>
</body>

</html>

// Файл: lib\api.ts
export interface ApiResponse<T> {
    ok: boolean;
    data: T;
    status: number;
}

export async function apiRequest<T>(
    url: string,
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',
    body: Record<string, any> | null = null,
    headers: Record<string, string> = {}
): Promise<ApiResponse<T>> {

    const apiUrl = import.meta.env.VITE_API_URL;
    const fullUrl = `${apiUrl}${url}`;

    const defaultHeaders: Record<string, string> = {};
    if (body) {
        defaultHeaders['Content-Type'] = 'application/json';
    }

    const requestOptions: RequestInit = {
        method,
        headers: { ...defaultHeaders, ...headers },
        body: body ? JSON.stringify(body) : null,
    };

    const res = await fetch(fullUrl, requestOptions);
    const data: T = await res.json();
    return { ok: res.ok, data, status: res.status };
}

// Файл: lib\authService.ts
import { apiRequest } from './api';
import type { ApiResponse } from './api';

interface RegistrationResponse {
    id: number;
    username: string;
    email: string;
}

interface LoginResponse {
    access: string;
    refresh: string;
    detail?: string;
}

export async function registerUser(username: string, email: string, password: string): Promise<ApiResponse<RegistrationResponse>> {
    return apiRequest<RegistrationResponse>('register/', 'POST', { username, email, password });
}

export async function loginUser(username: string, password: string): Promise<ApiResponse<LoginResponse>> {
    return apiRequest<LoginResponse>('login/', 'POST', { username, password });
}

// Файл: lib\protectedService.ts
import { apiRequest } from './api';
import type { ApiResponse } from './api';

interface ProtectedDataResponse {
    message: string;
}

export async function fetchProtectedData(): Promise<ApiResponse<ProtectedDataResponse>> {
    const accessToken = localStorage.getItem('access_token');
    const headers = { 'Authorization': `Bearer ${accessToken}` };
    return apiRequest<ProtectedDataResponse>('protected/', 'GET', null, headers);
}

// Файл: routes\+layout.svelte
<div class="container">
	<!-- svelte-ignore a11y_no_redundant_roles -->
	<nav class="navbar" role="navigation" aria-label="main navigation">
		<div class="navbar-brand">
			<a class="navbar-item" href="/"> Главная </a>
		</div>
	</nav>
	<slot />
</div>

// Файл: routes\+page.svelte
<main>
	<h1>welcome</h1>
	<p>
		<a href="/auth/login">login</a> | <a href="/auth/register">signup</a>
	</p>
</main>

// Файл: routes\+page.ts
// since there's no dynamic data here, we can prerender
// it so that it gets served as a static asset in production
export const prerender = true;

// Файл: routes\auth\login\+page.svelte
<script lang="ts">
	import { loginUser } from '$lib/authService';
	import { goto } from '$app/navigation';

	let username = '';
	let password = '';
	let error = '';

	async function login() {
		const result = await loginUser(username, password);
		if (result.ok) {
			localStorage.setItem('access_token', result.data.access);
			localStorage.setItem('refresh_token', result.data.refresh);
			alert('Вы успешно вошли!');
			goto('/protected');
		} else {
			error = result.data.detail || 'Неверные учетные данные';
		}
	}

	function handleKeyDown(event: KeyboardEvent) {
		if (event.key === 'Enter') {
			// Не вызываем login здесь, так как submit формы обработает Enter
		}
	}
</script>

<main class="container">
	<section class="section">
		<h1 class="title">Вход</h1>
		{#if error}
			<div class="notification is-danger">{error}</div>
		{/if}
		<form on:submit|preventDefault={login}>
			<div class="field">
				<label class="label" for="login-username">Имя пользователя</label>
				<div class="control">
					<input
						class="input"
						type="text"
						placeholder="Введите имя пользователя"
						bind:value={username}
						on:keydown={handleKeyDown}
						id="login-username"
						name="username"
						autocomplete="username"
						required
					/>
				</div>
			</div>
			<div class="field">
				<label class="label" for="login-password">Пароль</label>
				<div class="control">
					<input
						class="input"
						type="password"
						placeholder="Введите пароль"
						bind:value={password}
						on:keydown={handleKeyDown}
						id="login-password"
						name="password"
						autocomplete="current-password"
						required
					/>
				</div>
			</div>
			<div class="field">
				<div class="control">
					<button class="button is-primary" type="submit">Войти</button>
				</div>
			</div>
			<p class="has-text-centered">Нет аккаунта? <a href="/auth/register">Зарегистрироваться</a></p>
		</form>
	</section>
</main>

// Файл: routes\auth\register\+page.svelte
<script lang="ts">
	import { registerUser } from '$lib/authService';
	import { goto } from '$app/navigation';

	let username = '';
	let email = '';
	let password = '';
	let error = '';

	async function register() {
		const result = await registerUser(username, email, password);
		if (result.ok) {
			alert('Регистрация прошла успешно! Теперь войдите.');
			goto('/auth/login');
		} else {
			error = result.data.detail || 'Ошибка регистрации';
		}
	}
</script>

<main class="container">
	<section class="section">
		<h1 class="title">Регистрация</h1>
		{#if error}
			<div class="notification is-danger">{error}</div>
		{/if}
		<form on:submit|preventDefault={register}>
			<div class="field">
				<label class="label" for="register-username">Имя пользователя</label>
				<div class="control">
					<input
						class="input"
						type="text"
						placeholder="Введите имя пользователя"
						bind:value={username}
						id="register-username"
						name="username"
						autocomplete="username"
						required
					/>
				</div>
			</div>
			<div class="field">
				<label class="label" for="register-email">Email</label>
				<div class="control">
					<input
						class="input"
						type="email"
						placeholder="Введите ваш email"
						bind:value={email}
						id="register-email"
						name="email"
						autocomplete="email"
						required
					/>
				</div>
			</div>
			<div class="field">
				<label class="label" for="register-password">Пароль</label>
				<div class="control">
					<input
						class="input"
						type="password"
						placeholder="Введите пароль"
						bind:value={password}
						id="register-password"
						name="password"
						autocomplete="new-password"
						required
					/>
				</div>
			</div>
			<div class="field">
				<div class="control">
					<button class="button is-primary" type="submit">Зарегистрироваться</button>
				</div>
			</div>
			<p class="has-text-centered">Уже есть аккаунт? <a href="/auth/login">Войти</a></p>
		</form>
	</section>
</main>

// Файл: routes\protected\+page.svelte
<script lang="ts">
	import { fetchProtectedData } from '$lib/protectedService';
	import { goto } from '$app/navigation';
	import { onMount } from 'svelte';

	let message = '';
	let error = '';
	let loading = false;

	async function loadProtectedData() {
		loading = true;
		const result = await fetchProtectedData();
		loading = false;

		if (result.ok) {
			message = result.data.message;
			error = '';
		} else {
			error = result.data.detail || 'Ошибка получения защищенных данных';
			if (result.status === 401) {
				alert('Ваш токен истек или недействителен. Пожалуйста, войдите снова.');
				localStorage.removeItem('access_token');
				localStorage.removeItem('refresh_token');
				goto('/auth/login');
			}
			message = '';
		}
	}

	onMount(loadProtectedData);

	function logout() {
		localStorage.removeItem('access_token');
		localStorage.removeItem('refresh_token');
		goto('/auth/login');
	}
</script>

<main class="container">
	<section class="section">
		<h1 class="title">Защищенная страница</h1>
		{#if loading}
			<p>Загрузка...</p>
		{:else if error}
			<div class="notification is-danger">{error}</div>
		{:else if message}
			<div class="notification is-success">{message}</div>
		{/if}
		<button class="button is-warning" on:click={logout}>Выйти</button>
	</section>
</main>

// Файл: routes\protected\+page.ts
// since there's no dynamic data here, we can prerender
// it so that it gets served as a static asset in production
export const prerender = false;
